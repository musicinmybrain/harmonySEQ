/*
    Copyright (C) 2010 Rafał Cieślak

    This file is part of harmonySEQ.

    HarmonySEQ is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    HarmonySEQ is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with HarmonySEQ.  If not, see <http://www.gnu.org/licenses/>.
*/


#include "Files.h"
#include "Sequencer.h"
#include "MainWindow.h"
#include "messages.h"

namespace Files {
    
void SaveToFile(){
    *dbg << "saiving to file!\n";
    Gtk::FileChooserDialog dialog(_("Choose a file to save..."),Gtk::FILE_CHOOSER_ACTION_SAVE);
    dialog.set_transient_for(*mainwindow);
    dialog.add_button(Gtk::Stock::CANCEL,Gtk::RESPONSE_CANCEL);
    dialog.add_button(Gtk::Stock::SAVE,Gtk::RESPONSE_OK);

    Glib::KeyFile kf;

    int result = dialog.run();
    Glib::ustring filename = dialog.get_filename();
    char temp[300];
    ofstream output_file;

    switch (result){
        case Gtk::RESPONSE_OK:


            output_file.open(filename.c_str(),ios_base::trunc);
            if(!output_file.good()){
                sprintf(temp,_("ERROR - error while opening file %s to write.\n"),filename.c_str());
                *err << temp;

            }
            sprintf(temp,"harmonyseq file, generated by harmonySEQ %s. Manual editing not suggested, since the program does not check whether the data here is correct - may cause crashes.",VERSION);
            kf.set_comment(temp);
            kf.set_string("harmonySEQ","version",VERSION);
            kf.set_integer("harmonySEQ","versionA",VERSION_A);
            kf.set_integer("harmonySEQ","versionB",VERSION_B);
            kf.set_integer("harmonySEQ","versionC",VERSION_C);
            kf.set_double(FILE_GROUP_SYSTEM,FILE_KEY_SYSTEM_TEMPO,tempo);
            kf.set_integer(FILE_GROUP_SYSTEM,FILE_KEY_SYSTEM_MAINNOTE,mainnote);
            kf.set_integer(FILE_GROUP_SYSTEM,FILE_KEY_SYSTEM_SEQ_NUM,sequencers.size());

            for (unsigned int x = 0; x < sequencers.size(); x++){
                if(sequencers[x] == NULL) continue;
                sprintf(temp,FILE_GROUP_TEMPLATE_SEQ,x);
                kf.set_string(temp,FILE_KEY_SEQ_NAME,sequencers[x]->GetName());
                kf.set_boolean(temp,FILE_KEY_SEQ_ON,sequencers[x]->GetOn());
                kf.set_integer(temp,FILE_KEY_SEQ_CHANNEL,sequencers[x]->GetChannel());
                kf.set_boolean(temp,FILE_KEY_SEQ_APPLY_MAIN_NOTE,sequencers[x]->GetApplyMainNote());
                kf.set_integer(temp,FILE_KEY_SEQ_RESOLUTION,sequencers[x]->resolution);
                kf.set_double(temp,FILE_KEY_SEQ_LENGTH,sequencers[x]->length);
                kf.set_integer_list(temp,FILE_KEY_SEQ_SEQUENCE,sequencers[x]->sequence);
                kf.set_integer_list(temp,FILE_KEY_SEQ_NOTES,sequencers[x]->notes);

            }


            //*dbg << kf.to_data();
            output_file << kf.to_data().c_str();

            output_file.close();
            break;
        case Gtk::RESPONSE_CANCEL:

            break;

        default:
            *dbg << "unknown response returned!\n";
        break;
    }

}

void LoadFromFile(){
    *dbg << "loading file!\n";
    Gtk::FileChooserDialog dialog(_("Choose a file to open..."),Gtk::FILE_CHOOSER_ACTION_OPEN);
    dialog.set_transient_for(*mainwindow);
    dialog.add_button(Gtk::Stock::CANCEL,Gtk::RESPONSE_CANCEL);
    dialog.add_button(Gtk::Stock::SAVE,Gtk::RESPONSE_OK);

    Glib::KeyFile kf;

    int result = dialog.run();
    Glib::ustring filename = dialog.get_filename();
    char temp[100];
    int number;


    switch (result){
        case Gtk::RESPONSE_OK:
            if(!kf.load_from_file(filename)){
                sprintf(temp,_("ERROR - error while trying to read %s\n"),filename.c_str());
                *err << temp;
                break;
            }

            tempo = kf.get_double(FILE_GROUP_SYSTEM,FILE_KEY_SYSTEM_TEMPO);
            mainnote = kf.get_integer(FILE_GROUP_SYSTEM,FILE_KEY_SYSTEM_MAINNOTE);
            number = kf.get_integer(FILE_GROUP_SYSTEM,FILE_KEY_SYSTEM_SEQ_NUM);

            sequencers.clear();//woa hua hua hua!

            for (int x = 0; x < number; x++){
                sprintf(temp,FILE_GROUP_TEMPLATE_SEQ,x);
                if (!kf.has_group(temp)) {
                    
                    sequencers.push_back(NULL);
                    continue;
                }

                sequencers.push_back(new Sequencer());

                *dbg << "now loading data...\n";
                sequencers[x]->SetName(kf.get_string(temp,FILE_KEY_SEQ_NAME));
                sequencers[x]->SetOn(kf.get_boolean(temp,FILE_KEY_SEQ_ON));
                sequencers[x]->SetChannel(kf.get_integer(temp,FILE_KEY_SEQ_CHANNEL));
                sequencers[x]->SetApplyMainNote(kf.get_boolean(temp,FILE_KEY_SEQ_APPLY_MAIN_NOTE));
                sequencers[x]->resolution = kf.get_integer(temp,FILE_KEY_SEQ_RESOLUTION);
                *dbg << "resolution set to " << sequencers[x]->resolution << ENDL;
                sequencers[x]->length = kf.get_double(temp,FILE_KEY_SEQ_LENGTH);
                
                sequencers[x]->sequence.clear();
                std::vector<int> sequence = kf.get_integer_list(temp,FILE_KEY_SEQ_SEQUENCE);
                for (unsigned int n = 0; n < sequence.size(); n++){
                    sequencers[x]->sequence.push_back(sequence[n]);

                }

                sequencers[x]->notes.clear();
                *dbg << "now loading notes...\n";
                std::vector<int> notes = kf.get_integer_list(temp,FILE_KEY_SEQ_NOTES);
                for (unsigned int n = 0; n < notes.size(); n++){
                    *dbg << notes[n] << ENDL;
                    sequencers[x]->notes.push_back(notes[n]);

                }
                sequencers[x]->UpdateGui();
            }


            break;
        case Gtk::RESPONSE_CANCEL:

            break;

        default:
            *dbg << "unknown response returned!\n";
        break;



    }




}

}//namespace files